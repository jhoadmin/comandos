Instalar docker docker-compose pagina web

sudo apt-get purge docker-ce docker-ce-cli cotnainerd.io
sudo apt-get purge docker-ce docker-ce-cli containerd.io
sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo   "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
echo   "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable nightly" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo vi /etc/apt/sources.list
sudo less /etc/apt/sources.list
sudo apt-get install docker-ce docker-ce-cli containerd.io
docker run hello-world
docker run alpine:latest ls -l [argumento] - ejecutar comando dentro de contenedor
docker run -it alpine:latest sh - emular terminal

docker exec -it id_contenedor sh

docker start | stop id_contenedor (ps -a) - correr contenedor que queda activado

docker ps -a - mostrar muertos contenedores. los podemos startear y ejecutar comandos
docker commit nombre de contenedor (puede ser muerto) - para crear nuevo imagen
docker image ls
docker image tag id_image nombre_tag - para taguear nuevo imagen
docker image history id_image - historia de comandos ejecutados
docker build -t my-primero-php . - build con el mismo tag reescribe image
docker network create mynetwork

sudo docker run -d \
> --network mynetwork --network-alias mysql \
> -v mysql-data:/var/lib/mysql \
> -e MYSQL_ROOT_PASSWORD=secret \
> -e MYSQL_DATABASE=mybase \
> mysql:8.0.27

sudo docker exec -it 129b4f9a2662 mysql -p - dentro del contenedor con id_contenedor

#login y push
docker login
docker tag jhoadmin/node-getting:v1 images_id
docker push jhoadmin/node-getting:v1

Dentro de Dockfile
RUN apk add --update vim - install vim


sudo usermod -aG docker evg && newgrp docker
deluser user group

docker rmi 8a72bd4b69c
docker rm container
docker ps --filter "status=exited" | grep 'weeks ago' | awk '{print $1}' | xargs --no-run-if-empty docker rm
docker run --rm -v /foo -v awesome:/bar busybox top the volume for /foo will be removed, but the volume for /bar will not.
docker run --rm -- удаляет установленный контейнер
docker ps --filter status=exited (-q)|grep noip|awk '{print $1}'|xargs docker rm

docker run --restart=always my-container  -- autostart de contenedores

docker events& -- debug
docker search -- buscamos contenedores consola
docker-compose up -d 



Dockerfile определяет, как создается изображение, а не как оно используется, поэтому вы не можете указать привязку mount в Dockerfile.



Войдем в скачанный образ для его изменения:

docker run -t -i centos:latest /bin/bash

Внесем небольшие изменения, например, создадим учетную запись:

[root@8f07ef93918f /]# useradd dmosk -G wheel -m

[root@8f07ef93918f /]# passwd dmosk

[root@8f07ef93918f /]# exit

* в данном примере мы создали пользователя dmosk и задали ему пароль.

Коммитим образ:

docker commit -m "Add user dmosk" -a "Dmitry Mosk" 8f07ef93918f centos:my


CMD ["/bin/date"]
Entonces estás usando el ENTRYPOINT por defecto (que es /bin/sh -c), y ejecutando /bin/date sobre dicho punto de entrada.
El proceso del contenedor se iniciará con la ejecución de /bin/sh -c /bin/date.

ENTRYPOINT ["/bin/echo"]
CMD ["Hello"]
 docker build -t test .
$ docker run test
Hello
También puedes especificar un valor diferente para CMD al iniciar un contenedor, y se considerará como parámetro para el ejecutable /bin/echo (en vez del que viene por defecto):
$ docker run --entrypoint=/bin/hostname test
b2c70e74df18

MYSQL

ALTER USER root IDENTIFIED WITH mysql_native_password BY 'PASSWORD';

docker-compose

docker-compose restart |start |stop
docker-compose comando servicio - можно посмотреть сервис 
